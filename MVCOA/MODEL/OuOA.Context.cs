//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MODEL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class OuOAEntities : DbContext
    {
        public OuOAEntities()
            : base("name=OuOAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Bill_Leave> Bill_Leave { get; set; }
        public DbSet<Ou_Department> Ou_Department { get; set; }
        public DbSet<Ou_Permission> Ou_Permission { get; set; }
        public DbSet<Ou_Role> Ou_Role { get; set; }
        public DbSet<Ou_RolePermission> Ou_RolePermission { get; set; }
        public DbSet<Ou_UserInfo> Ou_UserInfo { get; set; }
        public DbSet<Ou_UserRole> Ou_UserRole { get; set; }
        public DbSet<Ou_UserVipPermission> Ou_UserVipPermission { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<WF_AutoTransactNode> WF_AutoTransactNode { get; set; }
        public DbSet<WF_BillFlowNode> WF_BillFlowNode { get; set; }
        public DbSet<WF_BillFlowNodeRemark> WF_BillFlowNodeRemark { get; set; }
        public DbSet<WF_BillState> WF_BillState { get; set; }
        public DbSet<WF_Node> WF_Node { get; set; }
        public DbSet<WF_NodeState> WF_NodeState { get; set; }
        public DbSet<WF_WorkFlow> WF_WorkFlow { get; set; }
        public DbSet<WF_WorkFlowNode> WF_WorkFlowNode { get; set; }
    
        public virtual ObjectResult<Proc_WorkFlow_BillRemark_List_Result> Proc_WorkFlow_BillRemark_List(Nullable<int> billID, Nullable<int> workFlowID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var workFlowIDParameter = workFlowID.HasValue ?
                new ObjectParameter("WorkFlowID", workFlowID) :
                new ObjectParameter("WorkFlowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_WorkFlow_BillRemark_List_Result>("Proc_WorkFlow_BillRemark_List", billIDParameter, workFlowIDParameter);
        }
    
        public virtual int Proc_WorkFlow_Interface(Nullable<int> billFlowNodeID, Nullable<int> billID, Nullable<int> workFlowID, Nullable<int> nodeID, Nullable<int> opType, Nullable<int> transactorID, string transactor, string transactorRemark)
        {
            var billFlowNodeIDParameter = billFlowNodeID.HasValue ?
                new ObjectParameter("BillFlowNodeID", billFlowNodeID) :
                new ObjectParameter("BillFlowNodeID", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var workFlowIDParameter = workFlowID.HasValue ?
                new ObjectParameter("WorkFlowID", workFlowID) :
                new ObjectParameter("WorkFlowID", typeof(int));
    
            var nodeIDParameter = nodeID.HasValue ?
                new ObjectParameter("NodeID", nodeID) :
                new ObjectParameter("NodeID", typeof(int));
    
            var opTypeParameter = opType.HasValue ?
                new ObjectParameter("OpType", opType) :
                new ObjectParameter("OpType", typeof(int));
    
            var transactorIDParameter = transactorID.HasValue ?
                new ObjectParameter("TransactorID", transactorID) :
                new ObjectParameter("TransactorID", typeof(int));
    
            var transactorParameter = transactor != null ?
                new ObjectParameter("Transactor", transactor) :
                new ObjectParameter("Transactor", typeof(string));
    
            var transactorRemarkParameter = transactorRemark != null ?
                new ObjectParameter("TransactorRemark", transactorRemark) :
                new ObjectParameter("TransactorRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_WorkFlow_Interface", billFlowNodeIDParameter, billIDParameter, workFlowIDParameter, nodeIDParameter, opTypeParameter, transactorIDParameter, transactorParameter, transactorRemarkParameter);
        }
    
        public virtual int proc_EditLeave(Nullable<int> billId, Nullable<int> billFlowNodeId, string name, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, string transactor, Nullable<int> transactorID, string transactorRemark)
        {
            var billIdParameter = billId.HasValue ?
                new ObjectParameter("billId", billId) :
                new ObjectParameter("billId", typeof(int));
    
            var billFlowNodeIdParameter = billFlowNodeId.HasValue ?
                new ObjectParameter("billFlowNodeId", billFlowNodeId) :
                new ObjectParameter("billFlowNodeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var transactorParameter = transactor != null ?
                new ObjectParameter("Transactor", transactor) :
                new ObjectParameter("Transactor", typeof(string));
    
            var transactorIDParameter = transactorID.HasValue ?
                new ObjectParameter("TransactorID", transactorID) :
                new ObjectParameter("TransactorID", typeof(int));
    
            var transactorRemarkParameter = transactorRemark != null ?
                new ObjectParameter("TransactorRemark", transactorRemark) :
                new ObjectParameter("TransactorRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_EditLeave", billIdParameter, billFlowNodeIdParameter, nameParameter, beginDateParameter, endDateParameter, transactorParameter, transactorIDParameter, transactorRemarkParameter);
        }
    
        public virtual ObjectResult<proc_GetLeaveList_Result> proc_GetLeaveList(Nullable<int> nodeID, Nullable<int> opType)
        {
            var nodeIDParameter = nodeID.HasValue ?
                new ObjectParameter("NodeID", nodeID) :
                new ObjectParameter("NodeID", typeof(int));
    
            var opTypeParameter = opType.HasValue ?
                new ObjectParameter("OpType", opType) :
                new ObjectParameter("OpType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetLeaveList_Result>("proc_GetLeaveList", nodeIDParameter, opTypeParameter);
        }
    
        public virtual int proc_InsertLeave(string name, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, string transactor, Nullable<int> transactorID, string transactorRemark)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var transactorParameter = transactor != null ?
                new ObjectParameter("Transactor", transactor) :
                new ObjectParameter("Transactor", typeof(string));
    
            var transactorIDParameter = transactorID.HasValue ?
                new ObjectParameter("TransactorID", transactorID) :
                new ObjectParameter("TransactorID", typeof(int));
    
            var transactorRemarkParameter = transactorRemark != null ?
                new ObjectParameter("TransactorRemark", transactorRemark) :
                new ObjectParameter("TransactorRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertLeave", nameParameter, beginDateParameter, endDateParameter, transactorParameter, transactorIDParameter, transactorRemarkParameter);
        }
    
        public virtual int proc_LeaveConfirm(Nullable<int> billID, Nullable<int> billFlowNodeID, string remark, string transactor, Nullable<int> transactorID, Nullable<int> opType)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var billFlowNodeIDParameter = billFlowNodeID.HasValue ?
                new ObjectParameter("BillFlowNodeID", billFlowNodeID) :
                new ObjectParameter("BillFlowNodeID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var transactorParameter = transactor != null ?
                new ObjectParameter("Transactor", transactor) :
                new ObjectParameter("Transactor", typeof(string));
    
            var transactorIDParameter = transactorID.HasValue ?
                new ObjectParameter("TransactorID", transactorID) :
                new ObjectParameter("TransactorID", typeof(int));
    
            var opTypeParameter = opType.HasValue ?
                new ObjectParameter("OpType", opType) :
                new ObjectParameter("OpType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LeaveConfirm", billIDParameter, billFlowNodeIDParameter, remarkParameter, transactorParameter, transactorIDParameter, opTypeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
